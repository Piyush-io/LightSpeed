@import url("https://fonts.googleapis.com/css2?family=Lexend+Deca&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap");
@import url("https://db.onlinewebfonts.com/c/c1a45b2db15fa7abe4df87429df1f939?family=Moniqa+Med+Cond+Display");
@import url("https://fonts.cdnfonts.com/css/cascadia-code");
*,
*::before,
*::after {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
    --primary: tomato;
    --fg-100: hsl(220 20% 98%);
    --fg-200: beige;
    --bounciness: 15;
}

html,
body,
#app {
    height: 100%;
}

body {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 1.5rem;
    font-family: monospace, system-ui;
    background: #000;
    color: #fff;
    overflow: hidden;
}

.typing {
    
}

body {
    font-family: "Cascadia Code", sans-serif;
    color: var(--fg-100);
    background: linear-gradient(
        to bottom right,
        #000808,
        #000e0e 25%,
        #001010 50%,
        #000c0c 75%,
        #000505
    );
    // overflow: hidden;
}

button {
    font: inherit;
    color: inherit;
    background: none;
    border: none;
    opacity: 0.4;
    transition: all 0.3s ease;
    padding: 20px;

    &:hover {
        cursor: pointer;
        opacity: 1;
    }
}

.radio-group {
    margin: 5%;
    margin-top: -10%;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    position: relative;
    color: beige;
    > input[type="radio"] {
        display: none;
    }

    > label {
        padding: 0.3rem 1rem;
        display: flex;
        justify-content: center;
        &:hover {
            cursor: pointer;
        }
    }
}

.selection-indicator-wrapper {
    --transition-duration: 0.3s;
    --morph-factor: 0;
    width: 33.33%;
    height: 100%;
    position: absolute;
    z-index: 1;
    mix-blend-mode: difference;
    transition-duration: var(--transition-duration);
    transition-timing-function: cubic-bezier(
        0.25,
        calc(var(--bounciness) / 10),
        0.5,
        1
    );

    left: 0;
    top: 50%;
    translate: 0 -50%;
    pointer-events: none;
    transform: translateX(calc(var(--morph-factor) * 10%));
    scale: calc(1 + var(--morph-factor) * var(--morph-factor) * 0.05)
        calc(1 - var(--morph-factor) * var(--morph-factor) * 0.1);

    > span {
        background-color: beige;
        display: block;
        width: 100%;
        height: 100%;
        border-radius: 100px;
        transition-duration: calc(1.25 * var(--transition-duration));
        transition-timing-function: cubic-bezier(
            0.95,
            calc(0.5 * var(--bounciness)),
            0,
            1
        );
    }
}

.radio-group
    input[type="radio"]:nth-of-type(2):checked
    ~ .selection-indicator-wrapper {
    left: 33.33%;
}

.radio-group
    input[type="radio"]:nth-of-type(3):checked
    ~ .selection-indicator-wrapper {
    left: 66.66%;
}

.radio-group label:hover,
.radio-group label:focus-visible {
    ~ input:checked ~ .selection-indicator-wrapper {
        --morph-factor: -1;
    }
    &:active ~ input:checked ~ .selection-indicator-wrapper {
        --morph-factor: 1;
    }
}

.radio-group label:hover,
.radio-group label:focus-visible {
    ~ input ~ input:checked ~ .selection-indicator-wrapper {
        --morph-factor: -2;
    }
    &:active ~ input ~ input:checked ~ .selection-indicator-wrapper {
        --morph-factor: 2;
    }
}

.radio-group input:checked ~ input + label:hover,
.radio-group input:checked ~ input + label:focus-visible {
    ~ .selection-indicator-wrapper {
        --morph-factor: 1;
    }
    &:active ~ .selection-indicator-wrapper {
        --morph-factor: -1;
    }
}

.radio-group input:checked ~ input ~ input + label:hover,
.radio-group input:checked ~ input ~ input + label:focus-visible {
    ~ .selection-indicator-wrapper {
        --morph-factor: 2;
    }
    &:active ~ .selection-indicator-wrapper {
        --morph-factor: -2;
    }
}

.radio-group label:active ~ .selection-indicator-wrapper {
    --transition-duration: 0.1s;
    > span {
        scale: calc(1 + var(--morph-factor) * var(--morph-factor) * 0.05)
            calc(1 - var(--morph-factor) * var(--morph-factor) * 0.1);
        transition-timing-function: unset;
    }
}

.link {
    position: fixed;
    bottom: 0.5rem;
    right: 0.5rem;
    color: #888;
}
